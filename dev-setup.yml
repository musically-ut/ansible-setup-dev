---
- hosts: dev
  remote_user: root
  vars:
      user_name: musicallyut
      git_user: Utkarsh Upadhyay
      git_email: musically.ut@gmail.com

      sshd: ssh
      sshd_config: /etc/ssh/sshd_config

      ssh_public_key_file: keys/id_ed25519.pub

  handlers:
    - name: restart sshd
      service: name=sshd state=restarted

  tasks:

    - name: Install sudo
      package:
        name: sudo
        state: present
      tags:
        - user, system
      ignore_errors: true

    - name: Install aptitude
      become: true
      become_method: sudo
      package:
        name: aptitude
        state: present
      tags:
        - system
      ignore_errors: true

    - name: Update Ubuntu cache
      become: true
      become_method: sudo
      apt:
        update_cache: yes
      tags:
        - system
      ignore_errors: true

    # See: https://github.com/ansible/ansible/issues/74830
    - name: Install acl
      become: true
      become_method: sudo
      package:
        name: acl
        state: present
      tags:
        - user, system
      ignore_errors: true

    # User management

    - name: Make sure we have a 'wheel' group
      become: true
      become_method: sudo
      group:
        name: wheel
        state: present
      tags:
        - user

    - name: Allow 'wheel' group to have passwordless sudo
      become: true
      become_method: sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
      tags:
        - user

    - name: "Create/add {{ user_name }} to wheel group"
      become: true
      become_method: sudo
      user:
        name: "{{ user_name }}"
        groups: wheel
        shell: /bin/bash
        append: yes
        state: present
        createhome: yes
      tags:
        - user

    - name: "Set up authorized keys for the {{ user_name }} user"
      become: true
      become_method: sudo
      authorized_key:
        user: "{{ user_name }}"
        key: "{{ item }}"
      with_file:
        - "{{ ssh_public_key_file }}"
      tags:
        - user

    - name: Disable empty password login
      become: true
      become_method: sudo
      lineinfile: dest={{ sshd_config }} regexp="^#?PermitEmptyPasswords" line="PermitEmptyPasswords no"
      notify: restart sshd
      tags:
        - user

    - name: Disable remote root login
      become: true
      become_method: sudo
      lineinfile: dest={{ sshd_config }} regexp="^#?PermitRootLogin" line="PermitRootLogin no"
      notify: restart sshd
      tags:
        - user

    - name: Disable password login
      become: true
      become_method: sudo
      lineinfile: dest={{ sshd_config }} regexp="^(#\s*)?PasswordAuthentication " line="PasswordAuthentication no"
      notify: restart sshd
      tags:
        - user

    # Install dev tools

    - name: Install Ruby
      become: true
      become_method: sudo
      package:
        name: ruby
        state: present
      tags:
        - dev
      ignore_errors: true

    - name: Install Python3
      become: true
      become_method: sudo
      package:
        name: python3
        state: present
      tags:
        - dev
      ignore_errors: true

    - name: Install Python3-pip
      become: true
      become_method: sudo
      package:
        name: python3-pip
        state: present
      tags:
        - dev
      ignore_errors: true

    - name: Install VIM
      become: true
      become_method: sudo
      package:
        name: vim
        state: present
      tags:
        - dev

    - name: Install git
      become: true
      become_method: sudo
      package:
        name: git
        state: present
      tags:
        - dev

    - name: Install tmux
      become: true
      become_method: sudo
      package:
        name: tmux
        state: present
      tags:
        - dev

    - name: Install htop
      become: true
      become_method: sudo
      package:
        name: htop
        state: present
      tags:
        - dev

    - name: Ensure local/z dir exists
      become: true
      become_user: "{{ user_name }}"
      file:
        path: "/home/{{ user_name }}/.local/z"
        state: directory
      tags:
        - dev

    - name: Install z.sh
      become: true
      become_user: "{{ user_name }}"
      get_url:
        url: https://raw.githubusercontent.com/rupa/z/master/z.sh
        dest: "/home/{{ user_name }}/.local/z/z.sh"
      tags:
        - dev

    - name: Install nvm.sh
      become: true
      become_user: "{{ user_name }}"
      shell: >
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
      args:
        warn: false
        creates: "/home/{{ user_name }}/.nvm/nvm.sh"
      tags:
        - dev

    - name: Install Node 12
      become: true
      become_user: "{{ user_name }}"
      become_method: sudo
      shell: ". /home/{{ user_name }}/.nvm/nvm.sh && nvm install 12"
      args:
          creates: "/home/{{ user_name }}/.nvm/versions/node/v12*"
          executable: bash
      tags:
        - dev

    # Prepare VIM

    - name: Install vim-plug
      become: true
      become_user: "{{ user_name }}"
      shell: "curl -fLo /home/{{ user_name }}/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
      args:
          warn: false
          creates: "/home/{{ user_name }}/.vim/autoload/plug.vim"
      tags:
        - dev

    # Copy configuration files

    - name: Copy vimrc
      become: true
      copy:
        src: dotfiles/vimrc
        dest: "/home/{{ user_name }}/.vimrc"
        owner: "{{ user_name }}"
      tags:
        - dev

    - name: Install vim plugins
      become: true
      become_user: "{{ user_name }}"
      shell:  "vim -E -s +PlugInstall +qall || true"
      tags:
        - dev

    - name: Copy bashrc
      become: true
      copy:
        src: dotfiles/bashrc
        dest: "/home/{{ user_name }}/.bashrc"
        owner: "{{ user_name }}"
      tags:
        - dev

    - name: Copy tmux.conf
      become: true
      copy:
        src: dotfiles/tmux.conf
        dest: "/home/{{ user_name }}/.tmux.conf"
        owner: "{{ user_name }}"
      tags:
        - dev

    - name: Copy gitconfig
      become: true
      copy:
        src: dotfiles/gitconfig
        dest: "/home/{{ user_name }}/.gitconfig"
        owner: "{{ user_name }}"
      tags:
        - dev

    - name: Fix user's full name in gitconfig
      become_user: "{{ user_name }}"
      become: true
      shell: "git config --global user.name '{{ git_user }}'"
      tags:
        - dev

    - name: Fix user's email in gitconfig
      become_user: "{{ user_name }}"
      become: true
      shell: "git config --global user.email '{{ git_email }}'"
      tags:
        - dev

    - name: Copy gitignore
      become: true
      copy:
        src: dotfiles/gitignore
        dest: "/home/{{ user_name }}/.gitignore"
        owner: "{{ user_name }}"
      tags:
        - dev

    - name: Ensure ~/bin dir exists
      become: true
      become_user: "{{ user_name }}"
      file:
        path: "/home/{{ user_name }}/bin"
        state: directory
      tags:
        - dev

    - name: Copy conda.sh
      become: true
      copy:
        src: dotfiles/conda.sh
        dest: "/home/{{ user_name }}/bin/conda.sh"
        owner: "{{ user_name }}"
      tags:
        - dev


    # Install powerline fonts

    - name: Fetch Powerline fonts
      become: true
      become_user: "{{ user_name }}"
      git:
        repo: https://github.com/powerline/fonts.git
        dest: "/home/{{ user_name }}/powerline-fonts"
      tags:
        - dev

    - name: Install fonts
      become: true
      become_user: "{{ user_name }}"
      shell: ./install.sh
      args:
        chdir: "/home/{{ user_name }}/powerline-fonts"
        creates: "/home/{{ user_name }}/.local/share/fonts/Anonymice Powerline.ttf"
      tags:
        - dev


    # Install Miniconda.sh

    - name: Download miniconda
      become: true
      become_user: "{{ user_name }}"
      get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: "/home/{{ user_name }}/miniconda.sh"
      tags:
        - dev

    - name: Install miniconda
      become: true
      become_user: "{{ user_name }}"
      shell: "bash /home/{{ user_name }}/miniconda.sh -b -p /home/{{ user_name }}/miniconda3"
      args:
          creates: "/home/{{ user_name }}/miniconda3"
      tags:
        - dev

" Set up:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" set clipboard+=unnamedplus
if has("nvim")
  call plug#begin('~/.nvim/plugged')
else
  call plug#begin('~/.vim/plugged')
endif

" Plug 'kchmck/vim-coffee-script'

" Highlight builtins in PaperColor theme
let g:PaperColor_Theme_Options = {
  \   'language': {
  \     'python': {
  \       'highlight_builtins' : 1
  \     },
  \     'cpp': {
  \       'highlight_standard_library': 1
  \     },
  \     'c': {
  \       'highlight_builtins' : 1
  \     }
  \   }
  \ }

Plug 'jparise/vim-graphql'
Plug 'bcicen/vim-vice'
Plug 'flazz/vim-colorschemes'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdtree'
Plug 'w0rp/ale'
" Plug 'scrooloose/syntastic'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'ervandew/supertab'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'mattn/emmet-vim'
Plug 'leafgarland/typescript-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'JuliaLang/julia-vim'
Plug 'Lokaltog/vim-powerline'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'gerw/vim-latex-suite'
Plug 'vim-scripts/YankRing.vim'
Plug 'groenewege/vim-less'
" Plug 'Lokaltog/vim-easymotion'
Plug 'othree/html5.vim'
Plug 'chrisbra/unicode.vim'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/octave.vim--'
" Plug 'tpope/vim-rsi'
" Plug 'terryma/vim-expand-region'
" Plug 'davidhalter/jedi-vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-liquid'
Plug 'chrisbra/csv.vim'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'hynek/vim-python-pep8-indent'
Plug 'mhinz/vim-signify'
Plug 'mhinz/vim-startify'
" Plug 'airblade/vim-gitgutter'

Plug 'whatyouhide/vim-gotham'
Plug 'majutsushi/tagbar'

Plug 'jmcantrell/vim-virtualenv'
Plug 'arcticicestudio/nord-vim'

Plug 'nightsense/snow'
Plug 'lepture/vim-jinja'

" Plug 'eiginn/netrw'
" Plug 'jelera/vim-javascript-syntax'

Plug 'psf/black'

call plug#end()

" Repeatedly hit v to expand and C-v to shrink visual selections
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

function! NoFancyAirline()
  let g:airline_left_sep=''
  let g:airline_right_sep=''
  let g:airline_section_z=''
endfunction

if has("nvim")
  call NoFancyAirline()
else
  " Use fancy fonts with airline (Doesn't seem to work)
  let g:airline_powerline_fonts = 1
endif


" Overall behavior guidelines
let formal=1
" set mousemodel=popup_setpos
" set mouse=a
set nocompatible
set grepprg=grep\ -nH\ $*

" Filetypes and editing preferences
set shellslash
filetype plugin on
filetype indent on
syntax on
set ai
set expandtab
set linebreak
set spell
set sw=4
set background=dark

" The backup paranoia
set backup
set backupdir+=~/tmp/vimBackUp
set patchmode=.orig
set undofile

" Presentation of the edit space
" set number
" set relativenumber
set hlsearch
map <leader><space> :noh<cr>

" R scripting issues
" Prevent '#' from going to the first column, like directives in C
inoremap # X#
" Do not convert _ to -> in R scripts
let g:vimrplugin_underscore=0

" Vim-LaTeXsuite options
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_ViewRuleComplete_dvi='dvipdf $*.dvi; evince $*.pdf &'
let g:Tex_GotoError=0 " Do not jump to error box.
if has("unix")
    let s:uname = system("ecno -n \"$(uname)\"")
    if !v:shell_error && s:uname == "Darwin"
        let g:Tex_ViewRuleComplete_pdf='open $*.pdf &'
    else
        let g:Tex_ViewRuleComplete_pdf='evince $*.pdf &'
    endif
end



" Favorite way to enter Normal model
imap ;p <Esc>
imap jj 
imap jJ 
imap Jj 
imap JJ 

" Taglist options
let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_WinWidth = 50

map <F4> :TlistToggle<cr>
map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

set suffixes+=.annot,.cmo,.cmi,.cmx,.orig,.exe
au BufNewFile,BufRead *.less       set filetype=less
au BufNewFile,BufRead *.lessimport set filetype=less
au BufNewFile,BufRead *.conf       set filetype=conf
au BufNewFile,BufRead *.template   set filetype=html
au BufNewFile,BufRead nginx.conf   set filetype=nginx
au BufNewFile,BufRead *.m          set filetype=octave
au BufNewFile,BufRead *.njk        set ft=jinja

" Do not show the '.orig' or '~' files
let NERDTreeIgnore=['\~$', '.*\.orig$', '.*\.pyc$']

" Move through windows more easily
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Make tmux controls work for vim as well
nnoremap <C-b> <C-w>

set guioptions-=T

" Keep 10 lines around the cursor always.
set scrolloff=10

"set statusline=%<\ %f\ %{fugitive#statusline()}\ %l/%L

" This disables the filetype part of the encoding.
" let g:airline_section_x=''

" This disables the file-encoding part of the status line.
let g:airline_section_y=''

" Highlighting for the pyflakes plugin.
if has("gui_running")
  highlight SpellBad term=underline gui=undercurl guisp=Orange
  " set guifont=Anonymous\ Pro\ 9
  " set guifont=DejaVu\ Sans\ Mono\ 9
  colorscheme solarized
  let g:airline_theme='tomorrow'
else
  " colorscheme gotham256
  let g:airline_theme='tomorrow'
  " let g:airline_theme='dark'
endif

" CtrlP settings
let g:ctrlp_map = '<c-\>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$\|.*\.o$\|.*\.out$\|.*\.orig$\|.*\~$\|dist$\|build$\|node_modules$\|.*\.html\.ts$\|.*\.html\.js.*$\|tmp$'

" Don't run syntastic on HTML files
let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'active_filetypes': [],
                           \ 'passive_filetypes': ['javascript', 'typescript', 'javascript.jsx'] }
" Ignore the line too long error
" let g:syntastic_python_python_exec='/usr/bin/python3'
let g:syntastic_python_python_exec='/usr/bin/env python'
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_args='--ignore=E501,E127,E221,E272,E203,E402'
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_jsx_checkers = ['eslint'] " Does not work.

let g:ale_python_flake8_options='--ignore=E501,E221,E203,E272,E127,E402,W503'
let g:ale_python_mypy_options='--ignore-missing-imports'
let g:ale_echo_msg_format = '%linter% says %s'

" Adding the augoten path for ghc-mod
" """""""""""""""""""""""""""""""""""
let g:syntastic_haskell_checker_args='--hlintOpt="--language=XmlSyntax" --ghcOpt="-i./dist/build/autogen/"'


" Highlight trailing symbols
let g:solarized_hitrail=0    " default value is 0

let g:Powerline_symbols = 'fancy'
set laststatus=2
" set guifont=Anonymous\ Pro\ for\ Powerline:h13


" let g:solarized_hitrail=1    "default value is 0
" Highlight the 80th column
set cc=80

" Removing trailing whitespace
""""""""""""""""""""""""""""""

fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    let _s=@/ 
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfun

augroup vimrc
 " Clear all autocmd
  autocmd!
  autocmd FileType tex,r,octave,matlab,rst,sh,sql,html,javascript,typescript,latex,org,haskell,c,cpp,java,php,ruby,python,md,coffee,less,yaml autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
  autocmd FileType sql setlocal nospell
  autocmd FileType matlab setlocal nospell
  autocmd FileType tex setlocal indentexpr=
  autocmd FileType python setlocal cc=88
augroup END


" In the Visual mode, <C-\> instead of opening the list of files (via Ctrl-P),
" will prepare the Tabularize command.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <C-\> ::Tabularize /
vnoremap <C-]> ::Tabularize /


" VimTip 80: Restore cursor to file position in previous editing session
" for unix/linux/solaris
set viminfo='50,\"500,:50,%,n~/.viminfo

nmap \t :NERDTreeToggle<CR>
nmap \n :NERDTreeFind<CR>

" Wrap with tag
" Wrap visual selection in an HTML tag.
vmap <Leader>w <Esc>:call VisualHTMLTagWrap()<CR>
function! VisualHTMLTagWrap()
  let tag = input("Tag to wrap block: ")
  if len(tag) > 0
    normal `>
    if &selection == 'exclusive'
      exe "normal i</".tag.">"
    else
      exe "normal a</".tag.">"
    endif
    normal `<
    exe "normal i<".tag.">"
    normal `<
    normal f<
    normal df>
    normal `<
  endif
endfunction

" Rudimentary folding
" From: http://profs.etsmtl.ca/mmcguffin/learn/vim/folding.txt 
function! ToggleFold()
   if foldlevel('.') == 0
      " No fold exists at the current line,
      " so create a fold based on indentation

      let l_min = line('.')   " the current line number
      let l_max = line('$')   " the last line number
      let i_min = indent('.') " the indentation of the current line
      let l = l_min + 1

      " Search downward for the last line whose indentation > i_min
      while l <= l_max
         " if this line is not blank ...
         if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
            if indent(l) <= i_min
               " we've gone too far
               let l = l - 1    " backtrack one line
               break
            endif
         endif
         let l = l + 1
      endwhile

      " Clamp l to the last line
      if l > l_max
         let l = l_max
      endif

      " Backtrack to the last non-blank line
      while l > l_min
         if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
            break
         endif
         let l = l - 1
      endwhile

      "execute "normal i" . l_min . "," . (l + 1) . " fold"   " print debug info

      if l > l_min
         " Create the fold from l_min to l
         execute l_min . "," . (l + 1) . " fold"
      endif
   else
      " Delete the fold on the current line
      normal zd
   endif
endfunction

nmap <space> :call ToggleFold()<CR>

" Do not let vim-julia override the default tab behavior
let g:latex_to_unicode_tab = 0

" Toggle spelling
nmap <leader>0 :setlocal spell!<CR>

" Do not add extra spaces while joining lines.
set nojoinspaces

set clipboard+=unnamed

" Remove divider symbols from Powerline (but doesn't work for vim-powerline)
let g:powerline_config_overrides={"common": {"dividers": {"left": {"hard": "", "soft": ""}, "right": {"hard": "", "soft": ""}}}}

" Airline settings
"
" let g:Powerline_symbols = 'fancy'
set encoding=utf-8
set laststatus=2
" set guifont=Anonymous\ Pro\ for\ Powerline:h13

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK easy-motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)


" vim-jedi settings
let g:jedi#use_splits_not_buffers = "left"
let g:jedi#usages_command = ""

map <leader><C-]> :sp <CR>:exec("tag ".expand("<cword>"))<CR>
" map <leader><C-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Turn off the errorbells
set noeb vb t_vb=

" Tagbar toggle
nmap <leader><leader>t :TagbarToggle<CR>
nmap <leader>b :TagbarToggle<CR>

" Fuzzy finding inside files!
nmap <C-f> :CtrlPLine<CR>

" Change to current directory
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" Make the gutters disappear for easy copy/pasting in Tmuxes
function! NoGutters()
  GitGutterDisable
  SignifyDisable
endfunction

nmap <leader>T :call NoGutters()<CR>

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Eliminating delays on ESC in vim
" https://www.johnhawthorn.com/2012/09/vi-escape-delays/
set timeoutlen=1000 ttimeoutlen=0

" Press <F2> to quickly toggle PASTE mode on/off
set pastetoggle=<F2>

nmap ]n :ALENextWrap<CR>
nmap ]p :ALEPrevWrap<CR>


